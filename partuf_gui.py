import os
import importlib

def bible(lib):
    try:
        if importlib.import_module(lib):
            return importlib.import_module(lib)
    except:
        try:
            os.system(f'pip install {lib}')
            return importlib.import_module(lib)
        except:
            os.system(f'sudo pip install {lib}')
            return importlib.import_module(lib)
        
bs4 = bible("bs4")
PySimpleGUI = bible("PySimpleGUI")
cfscrape = bible("cfscrape")
from bs4 import BeautifulSoup
import PySimpleGUI as sg
from shutil import which
from zipfile import ZipFile
import threading   
import subprocess
import socket
import os
import time
import requests as request
requests = cfscrape.create_scraper()


sg.theme("DefaultNoMoreNagging")
icone = b""""""
use = 666
opt = 1
tabelas = None
serie = None
resolut = []
magnetico = []
localhost = socket.gethostbyname(socket.gethostname())
os.popen('mkdir %USERPROFILE%\Desktop\Filmes >nul 2>&1 & taskkill /IM "node.exe" /F >nul 2>&1')


def user():
        user = os.popen("whoami").read().split("\\")[1].strip()
        return user


peerflix_path = f"C:\\Users\\{user()}\\AppData\\Roaming\\npm\\node_modules\\peerflix\\app.js"
node_path = "nodejs\\node.exe"


def restrear_path():
    global node_path
    
    if which('node'):
        node_path = 'node'


def pacotes():
    print("[+] Fazendo download de dependêndencias")

        
    def download_file_from_google_drive(id, destination):
        URL = "https://docs.google.com/uc?export=download"

        session = request.Session()

        response = session.get(URL, params = { 'id' : id }, stream = True)
        token = get_confirm_token(response)

        if token:
            params = { 'id' : id, 'confirm' : token }
            response = session.get(URL, params = params, stream = True)

        save_response_content(response, destination)
        

    def get_confirm_token(response):
        for key, value in response.cookies.items():
            if key.startswith('download_warning'):
                return value

        return None


    def save_response_content(response, destination):
        CHUNK_SIZE = 32768

        with open(destination, "wb") as f:
            for chunk in response.iter_content(CHUNK_SIZE):
                if chunk: # filter out keep-alive new chunks
                    f.write(chunk)

    file_id = '1ETbuo7sJ32WuRuWkyMOZhdLF6uA8-Tdh'
    destination = 'requisitos.zip'
    download_file_from_google_drive(file_id, destination)
        
    with ZipFile("requisitos.zip", "r") as extract:
        extract.extractall()

    os.remove("requisitos.zip")


def start_and_wait(programa):
    """ Inicia e verifica estado de um processo """
    
    print("\n[+] Um novo processo foi iniciado") 
    def start(programa=programa):
        subprocess.run(programa)
    processo = threading.Thread(target=start)
    processo.start()
    while processo.is_alive():
        time.sleep(1)
    

def dependencias():
    """ Verifica se alguma instalação está faltando e as instala se for o caso """
    
    global use
    if not which("npm"):
        if os.path.isfile(os.path.join("nodejs", "node.exe")):
            print("[+] Node encontrado")
        else:
            print("[+] Iniciando download do Node...")
            pacotes()
            print('Download completo')
        os.system("cls")
        
    
    if not which(peerflix_path):
        try:
            layout = [[sg.Text('Instalando peerflix...')]]
            window = sg.Window('Peerflix', layout, icon=icone)
            event, values = window.Read(timeout=100)
            print("[+] Iniciando instalação do Peerflix...")
            if not which(os.path.join("nodejs", "npm")):
                print('Tentando instalar Peerflix pelo Node da PATH do Windows')
                subprocess.run(os.path.join("dependencias", "refreshenv.cmd") + " & npm install -g peerflix")
            else:
                subprocess.run(os.path.join("nodejs", "npm") + " install -g peerflix", shell=True)
            window.close()
            os.system("cls")
        except:
            print("Erro ao instalar peerflix!")
        use = 1
        
    if not os.path.isdir(os.path.join("dependencias", "vlc")):
        pacotes()
        use = 1
        
    if not os.path.isfile(os.path.join("dependencias", "refreshenv.cmd")):
        pacotes()
        use = 1


def layout_inicial():
    global opt
    layout = [[sg.Text(16*" " + 'PARTUF - SUA FERRAMENTA DE STREAMING E DOWNLOAD DE FILMES E SÉRIES', size=(80,2))],
              [sg.Text('                                      '), sg.Radio('Streaming!', "1", default=True),
               sg.Radio('Download!', "1"),
               sg.Radio('Get Magnético!', "1")],
              [sg.Input(size=(90,1))],
              [sg.Cancel(), sg.OK()]]

    window = sg.Window('Partuf', layout, icon=icone)
    event, values = window.read()
    if event == None:
        try:
            os.popen('taskkill /IM "node.exe" /F')
        except:
            print('!!! Erro ao finalizar peerflix !!!')
    window.close()
        
    if values[0] is True:
        opt = 1
    elif values[1] is True:
        opt = 2
    elif values[2] is True:
        opt = 3

    return values[3]


def url_scrape():
    busca = layout_inicial()
    busca = busca.split()
    termos_da_busca = []
    # -1 porque o último termo será excluido (pois não tem o sinal [+] na url)
    for item in range(len(busca)-1):
        termos_da_busca.append(busca[item] + '+')
    concatenando = "".join(termos_da_busca)
    # Último termo é aderido a url de busca
    url = concatenando + busca[-1]
    url_final = 'https://www.baixafilme.net/?s='+url
    return url_final


def show_movie_list():
    """ Mostra a lista de filmes e armazena a url de cada um deles em [links] """

    req = requests.get(url_scrape())
    soup = BeautifulSoup(req.text, 'html.parser')
    listagem_da_pesquisa = soup.find_all("div", {'class':  'item'})
    titulos = []
    links = []
    
    print("\nCarregando lista de filmes...\n")
    for filme in listagem_da_pesquisa:
        titulos.append(str(filme).split('"')[5])
        links.append(str(filme).split('"')[3])
    for titulo in range(0, len(titulos)):
        print([titulo + 1], titulos[titulo])
    print()
    return [links, titulos]


def layout_selecionar_filmes():
    listas = show_movie_list()
    titulos = listas[1]
    links = listas[0]
    
    layout = [[sg.Listbox(titulos, size=(70, 18), font='Arial 18')],
          [sg.Button("  OK   "), sg.Button('Voltar')]]

    window = sg.Window('Títulos', layout, icon=icone)
    event, values = window.read()
    
    if event == 'Voltar':
        window.close()
        main()
    window.close()

    posit = 666
    for p in range(0, len(titulos)):
        if titulos[p] == values[0][0]:
            posit = p
    return links[posit]
    

def get_tables():
    """ Retorna a tabela com links-magneticos do filme selecionado """
    
    #movie_list = show_movie_list()[0]
    #select_number = int(input('Selecione um número: '))
    url_of_movie = layout_selecionar_filmes() #movie_list[select_number - 1]
    html = requests.get(url_of_movie)
    soup = BeautifulSoup(html.text, 'html.parser')
    tabelas = soup.find_all("table")
    return tabelas


def magnetics_and_resolution_of_movies():
    """ PARA FILMES: Adiciona resolucoes e links magneticos às suas respectivas listas """
    
    for tabela in range(0, len(tabelas)):
        single_table = BeautifulSoup(str(tabelas[tabela]), 'html.parser')
        strong = single_table.find("strong")

        try:
            html_qualidades = single_table.find_all("td", {'class':  'td-mv-res'})
            html_magnetic = single_table.find_all("td", {'class':  'td-mv-dow'})
            html_tamanho = single_table.find_all("td", {'class': 'td-mv-tam'})   
            
            for quali in range(0, len(html_qualidades)):
                resolut.append(f"{html_qualidades[quali].string} {strong.string}    |||     {html_tamanho[quali].string}")

            for link_mag in range(len(html_magnetic)):
                magnetico.append(str(html_magnetic[link_mag]).split('"')[3])
        except:
            pass


def magnetics_and_resolution_of_series():
    """ PARA SERIES: Adiciona resolucoes e links magneticos as suas respectivas listas """

    global tabelas,  resolut, magnetico    
    if len(magnetico) == 0:
        for tabela in range(0, len(tabelas)):
            single_table = BeautifulSoup(str(tabelas[tabela]), 'html.parser')
            strong = single_table.find("strong")

            # HTML para episódios da série
            html_num_epi = single_table.find_all("td", {'class': 'td-ep-eps'})
            html_qualidades = single_table.find_all("td", {'class': 'td-ep-res'})
            html_magnetic = single_table.find_all("td", {'class': 'td-ep-dow'})

            try:
                for quali in range(0, len(html_qualidades)):
                    resolut.append(f"{html_num_epi[quali].string.replace('Ep.', '-')} {'->>'} {html_qualidades[quali].string} {strong.string}")
                for link_mag in range(len(html_magnetic)):
                    magnetico.append(str(html_magnetic[link_mag]).split('"')[3])
            except:
                pass


def magneticos_da_serie_completa():
    global serie, tabelas,  resolut, magnetico

    if len(magnetico) == 0:
        for tabela in range(0, len(tabelas)):
            single_table = BeautifulSoup(str(tabelas[tabela]), 'html.parser')

            # HTML para episódios da série
            html_num_epi = single_table.find_all("td", {'class': 'td-tp-aud'})
            html_qualidades = single_table.find_all("td", {'class': 'td-tp-res'})
            html_magnetic = single_table.find_all("td", {'class': 'td-tp-dow'})
            
            try:
                for quali in range(0, len(html_qualidades)):
                    resolut.append(f"{html_num_epi[quali].string} {html_qualidades[quali].string}")

                for link_mag in range(len(html_magnetic)):
                    magnetico.append(str(html_magnetic[link_mag]).split('"')[3])
            except:
                pass
            
        if len(magnetico) == 0:
            serie = False
        else:
            serie = True


def get_episodes(magnetico):
    lista = os.popen(f'{node_path} {peerflix_path} {magnetico} -l').readlines()
    lista = [x for x in lista if x.find('.jpg') == -1 and x.find('.srt') == -1 and x.find('.txt') == -1 and x.find('.png') == -1 and x.find('.jpeg') == -1 and x.find('.gif') == -1 and x.find('.bmp') == -1 and x.find('.pdf') == -1] 
    epi_titulos = []
    index = []

    for x in lista:
        try:

            epi_titulos.append(x.split("\x1b[35m")[1].split("\x1b[39m")[0])
        except:
            print('Não é um título de episódio')

    for x in lista:
        try:
            index.append(x.split("\x1b[1m")[1].split("\x1b[22m")[0].strip())
        except:
            print('Não é um index de episódio')

    final = []
    cont = 0
    for c in epi_titulos:
        final.append([c, [index[cont]]])
        cont += 1
    final = sorted(final)
    return final


def select_resolution():
    global window        

    c = 1
    for x in resolut:
        print([c], x)
        c += 1

    layout = [[sg.Listbox(resolut, size=(70, 18), font='Arial 18')],
              [sg.Button('  OK   '), sg.Button('Voltar')]]
    window = sg.Window('Resolut', layout, icon=icone)
    event, values = window.read()
    
    if event == 'Voltar':
        window.close()
        main()
    window.close()

    posit = 666
    for p in range(0, len(resolut)):
        if resolut[p] == values[0][0]:
            posit = p

    mag_final = magnetico[posit]
    return mag_final


def peneira():
    global resolut, magnetico, window
    
    if serie:
        url_magnetico = select_resolution()
        episodes = get_episodes(url_magnetico)
        resolut = [x[0] for x in episodes]
        magnetico = [x[1][0] for x in episodes]
        return [url_magnetico, select_resolution()]
    else:
        url_magnetico = select_resolution()
        return [url_magnetico, '']
        

def options():
    global opt, serie, resolut, magnetico   
    

    # Faz streming enquanto realiza o download
    if opt == 1:

        resolut_fixo = None
        magnetico_fixo = None

        print('--------')
        print(resolut)

        while True:
            if not resolut_fixo and not magnetico_fixo:
                resolut_fixo = resolut
                magnetico_fixo = magnetico
            else:
                resolut = resolut_fixo
                magnetico = magnetico_fixo

            mag_final, index = peneira()
            layout = [[sg.Text('Aguarde um instante...')]]
            window = sg.Window('Peerflix', layout, icon=icone)
            event, values = window.Read(timeout=100)
            
            print("\nAguarde o carregamento... \nEnjoy!!\n")
            # Caso não seja a primeira vez de uso do aplicativo [use] terá valor 666
            if use == 666:
                # Se for alguma série, o index mudará para o índice referente ao episódio     
                if index == '':
                    start_host = subprocess.Popen([node_path, peerflix_path, mag_final, "--path", os.path.join("%USERPROFILE%", "Desktop", "Filmes")], shell=True)
                else:
                    start_host = subprocess.Popen([node_path, peerflix_path, mag_final, "-i", index, "--path", os.path.join("%USERPROFILE%", "Desktop", "Filmes")], shell=True)
                # Verifica se há algum fluxo de transmissão no localhost
                code = 0
                while code != 200:
                    try:
                        requests.get(f'http://{localhost}:8888/', stream=True).status_code
                        code = 200
                    except:
                        pass    
                
                start_and_wait(f'{os.path.join("dependencias", "vlc", "App", "vlc", "vlc.exe")} http://{localhost}:8888')
                window.close()

                try:                    
                    os.popen('taskkill /IM "node.exe" /F')
                except:
                    print('!!! Erro ao finalizar peerflix !!!')
                    
            else:
                if index == '':
                    start_host = subprocess.Popen([os.path.join("dependencias", "refreshenv.cmd") + "&", node_path, peerflix_path, mag_final, "--path", os.path.join("%USERPROFILE%", "Desktop", "Filmes")], shell=True)
                else:
                    start_host = subprocess.Popen([os.path.join("dependencias", "refreshenv.cmd") + "&", node_path, peerflix_path, mag_final, "-i", index, "--path", os.path.join("%USERPROFILE%", "Desktop", "Filmes")], shell=True)

                # Verifica se há algum fluxo de transmissão no localhost
                code = 0
                while code != 200:
                    try:
                        requests.get(f'http://{localhost}:8888/', stream=True).status_code
                        code = 200
                    except:
                        pass
                  
                start_and_wait(f'{os.path.join("dependencias", "refreshenv.cmd")} & {os.path.join("dependencias", "vlc", "App", "vlc", "vlc.exe")} http://{localhost}:8888')
                window.close()
                try:
                    os.popen('taskkill /IM "node.exe" /F')
                except:
                    print('!!! Erro ao finalizar peerflix !!!')
            
    # Somente faz o download
    elif opt == 2:
        mag_final, index = peneira()
        sg.Window('Download:', [[sg.Multiline(default_text=f'', size=(len(mag_final), 10))]]).Read()
        print("\nDownload iniciado...\n")
        if use == 666:
            start_host = subprocess.run([node_path, peerflix_path, mag_final, "-q", "--path", os.path.join("%USERPROFILE%", "Desktop", "Filmes")], shell=True)
        else:
            start_host = subprocess.run([os.path.join("dependencias", "refreshenv.cmd"), "&", node_path, peerflix_path, mag_final, "-q", "--path", os.path.join("%USERPROFILE%", "Desktop", "Filmes")], shell=True)
        window.close()

    # Retorna o link magnético
    elif opt == 3:
        mag_final, index = peneira()
        print("\nLink magnético:\n")
        print(mag_final)
        print()
        sg.Window('Link magnético:', [[sg.Multiline(default_text=f'{mag_final}', size=(len(mag_final), 10))]]).Read()


def main():
    global tabelas, resolut, magnetico, use

    resolut = []
    magnetico = []

    if use == 1:
        pass
    else:
        dependencias()     

    tabelas = get_tables()
    magnetics_and_resolution_of_movies()
    magneticos_da_serie_completa()
    magnetics_and_resolution_of_series()
    restrear_path()
    options()


while True:
    main()
